from ..grammar import *
from ..grammar.engine_ast import *

eof = Terminal("EOF")

bs_file = NonTerminal("bs_file")
classes = NonTerminal("classes")
statements = NonTerminal("statements")
statement = NonTerminal("statement")
Semicolon = Terminal(";", ";")
func_def = NonTerminal("func_def")
if_def = NonTerminal("if_def")
class_def = NonTerminal("class_def")
while_def = NonTerminal("while_def")
assign = NonTerminal("assign")
return_stat = NonTerminal("return_stat")
_break = Terminal("break", value="break")
_continue = Terminal("continue", value="continue")
expressions = NonTerminal("expressions")
functions = NonTerminal("functions")
constructor = NonTerminal("constructor")
tconstructor = Terminal("constructor", "constructor")
attr = NonTerminal("attributes")
attr_def = NonTerminal("attr_def")
this = Terminal("this", "this")
function = Terminal("function", "function")
name = Terminal("NAME")
lparent = Terminal("(", "(")
rparent = Terminal(")", ")")
arrow = Terminal("->", "->")
_if = Terminal("if", "if")
expression = NonTerminal("expression")
block = NonTerminal("block")
elif_def = NonTerminal("elif_def")
else_def = NonTerminal("else_def")
_elif = Terminal("elif", "elif")
_else = Terminal("else", "else")
_class = Terminal("class", "class")
_is = Terminal("is", "is")
_type = NonTerminal("type")
tnumber = Terminal("number", "number")
oeq = Terminal("=", "=")
_return = Terminal("return", "return")
lcurly = Terminal("{", "{")
rcurly = Terminal("}", "}")
params = NonTerminal("params")
comma = Terminal(",", ",")
disjunction = NonTerminal("disjunction")
_or = Terminal("or", 'or')
conjunction = NonTerminal("conjunction")
_and = Terminal("and", "and")
inversion = NonTerminal("inversion")
_not = Terminal("not", "not")
comparision = NonTerminal("comparision")
_sum = NonTerminal("sum")
compare_par = NonTerminal("compare_par")
_eq = Terminal("eq", "eq")
_neq = Terminal("neq", "neq")
_lte = Terminal("lte", "lte")
_lt = Terminal("lt", "lt")
_gte = Terminal("gte", "gte")
_gt = Terminal("gt", "gt")
plus = Terminal("+", "+")
term = NonTerminal("term")
minus = Terminal("-", "-")
factor = NonTerminal("factor")
mul = Terminal("*", "*")
div = Terminal("/", "/")
mod = Terminal("%", "%")
_pow = NonTerminal("pow")
opow = Terminal("^", "^")
primary = NonTerminal("primary")
dot = Terminal(".", ".")
atom = NonTerminal("atom")
args = NonTerminal("args")
_list = NonTerminal("list")
lbracket = Terminal("[", "[")
rbracket = Terminal("]", "]")
true = Terminal("True")
false = Terminal("False")
none = Terminal("None")
number = Terminal("NUMBER")
_while = Terminal("while", "while")
void = Terminal("void", "void")
_bool = Terminal("bool", "bool")
return_type = NonTerminal("return_type")
decl = NonTerminal("decl")

bs_file += Production([classes, statements, eof], 1, build_program)
bs_file += Production([eof],2)

classes += Production([class_def, Semicolon, classes], 3,build_classes1)
classes += Production([class_def, Semicolon], 4,build_classes2)

statements += Production([statement, Semicolon, statements], 5,build_statements1)
statements += Production([statement, Semicolon], 6,build_statements2)

statement += Production([func_def],7)
statement += Production([if_def],8)
statement += Production([while_def],9)
statement += Production([decl],10)
statement += Production([assign],11)
statement += Production([return_stat],12)
statement += Production([_break], 13,build_breack)
statement += Production([_continue], 14,build_continue)
statement += Production([expressions],15)

func_def += Production([function, return_type, name, lparent, params, rparent, arrow, block], 16,build_func_def1)
func_def += Production([function, return_type, name, lparent, rparent, arrow, block], 17,build_func_def2)

if_def += Production([_if, expression, arrow, block, elif_def],18, build_if_def1)
if_def += Production([_if, expression, arrow, block, else_def], 19,build_if_def2)
if_def += Production([_if, expression, arrow, block], 20,build_if_def3)

elif_def += Production([_elif, expression, arrow, block, elif_def], 21,build_elif_def1)
elif_def += Production([_elif, expression, arrow, block, else_def], 22,build_elif_def2)
elif_def += Production([_elif, expression, arrow, block], 23,build_elif_def3)

else_def += Production([_else, arrow, block], 25,build_else_def)

class_def += Production([_class, name, _is, name, arrow, lcurly, constructor, Semicolon, functions, Semicolon, rcurly], 26,build_class_def1)
class_def += Production([_class, name, _is, name, arrow, lcurly, constructor, Semicolon, rcurly], 27,build_class_def2)

functions += Production([func_def, Semicolon, functions], 28,build_functions1)
functions += Production([func_def, Semicolon],29, build_functions2)

constructor += Production([tconstructor, lparent, params, rparent, arrow, lcurly, attr, rcurly, Semicolon], 30,build_constructor1)
constructor += Production([tconstructor, lparent, rparent, arrow, lcurly, attr, rcurly, Semicolon], 31,build_constructor2)
constructor += Production([tconstructor, lparent, rparent, lcurly, rcurly, Semicolon], 32,build_constructor3)

attr += Production([attr_def, Semicolon, attr],33, build_attributes1)
attr += Production([attr_def, Semicolon],34, build_attributes2)

attr_def += Production([_type, this, dot, name, oeq, expression], 35,build_attr_def)

while_def += Production([_while, expression, arrow, block],36, build_while_def)

return_type += Production([void], 37,build_return_type)
return_type += Production([_type], 38,build_return_type)

_type += Production([tnumber],39, build_type)
_type += Production([_bool],40, build_type)
_type += Production([name], 41,build_type)

decl += Production([_type, name, oeq, expression], 42,build_decl)

assign += Production([name, oeq, expression], 43,build_assign)

return_stat += Production([_return, expression], 44,build_return1)
return_stat += Production([_return], 45,build_return2)

block += Production([ lcurly, statements, rcurly, Semicolon], 46,build_block)

params += Production([_type, name, comma, params],47, build_params1)
params += Production([_type, name], 48,build_params2)

expressions += Production([expression, comma, expressions], 49,build_expressions1)
expressions += Production([expression], 50,build_expressions2)

expression += Production([disjunction, _if, disjunction, _else, expression],51, build_ternary_expression)
expression += Production([disjunction],52)

disjunction += Production([conjunction, _or, disjunction], 53,build_disjunction)
disjunction += Production([conjunction],54)

conjunction += Production([inversion, _and, conjunction], 55,build_conjuction)
conjunction += Production([inversion],56)

inversion += Production([_not, inversion],57, build_inversion)
inversion += Production([comparision],58)

comparision += Production([_sum, compare_par], 59,build_comparision)
comparision += Production([_sum],60)

compare_par += Production([_eq, _sum],61, build_compare_par)
compare_par += Production([_neq, _sum],62, build_compare_par)
compare_par += Production([_lte, _sum],63, build_compare_par)
compare_par += Production([_lt, _sum], 64,build_compare_par)
compare_par += Production([_gte, _sum], 65,build_compare_par)
compare_par += Production([_gt, _sum], 66, build_compare_par)

_sum += Production([_sum, plus, term], 67,build_aritmetic_expression)
_sum += Production([_sum, minus, term], 68,build_aritmetic_expression)
_sum += Production([term],69)

term += Production([term, mul, factor], 70,build_aritmetic_expression)
term += Production([term, div, factor], 71,build_aritmetic_expression)
term += Production([term, mod, factor], 71,build_aritmetic_expression)
term += Production([factor],73)

factor += Production([plus, factor],74)
factor += Production([minus, factor],75)
factor += Production([_pow],76)

_pow += Production([primary, opow, factor], 77,build_aritmetic_expression)
_pow += Production([primary],78)

primary += Production([primary, dot, name], 79,build_primary1)
primary += Production([primary, lparent, args, rparent], 80,build_primary2)
primary += Production([primary, lparent, rparent],81, build_primary3)
primary += Production([atom],82)

args += Production([expression, comma, args],83)
args += Production([expression],84)

atom += Production([name], 85,build_Variable)
atom += Production([true], 86, build_Bool)
atom += Production([false], 87,build_Bool)
atom += Production([none], 88,build_None)
atom += Production([number], 89, build_Number)
atom += Production([_list], 90)

_list += Production([lbracket, expressions, rbracket], 91,build_list1)
_list += Production([lbracket, rbracket], 92,build_list2)


GRAMMAR = Grammar(bs_file)
